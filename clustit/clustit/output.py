import json
import numpy as np
import pandas
from collections import OrderedDict

from clustit.embedding import get_column_names

class OutputCollection(object):

    def __init__(self, data_frame=None, largevis_file=None):
        """ Create an Object to collects output from clustit for visualization using DiVE

        :param: data_frame: A data frame containing the output produced by LargeVis
        :type data_frame: pandas.DataFrame

        """
        if largevis_file:
            if data_frame:
                raise Exception("Error: please use either data_frame or largevis_file")
            with open(largevis_file, 'r') as f:
                ndim = int(f.readline().split(" ")[-1])
            names = get_column_names(ndim)
            data_frame = pandas.read_csv(largevis_file, sep=" ", names=names, header=0)

        self.data_frame = data_frame.sort_values('filename')
        self.property_names = []

        self.properties = OrderedDict((k,[]) for k in data_frame.filename[:])



    def to_array(self):
        """ Output a 2D numpy array with the coordinates generated by LargeVis """
        df = self.data_frame
        return np.array(df[df.columns[1:]], dtype=np.float32)



    def to_DiVE(self, filename=None):
        """ Store the current collection to a JSON file to be used with DiVE """
        df = self.data_frame
        keys = df.filename[:]

        #convert Pandas DataFrame to json format in a way that DiVE expects
        values = df[df.columns[1:]]
        dict_of_dicts = OrderedDict((str(k), {"Coordinates": [float(x) for x in v]}) for k,v in zip(keys, values.to_records(index=False)))

        #add properties array to each item
        for k,d in dict_of_dicts.items():
            d["Properties"] = [str(s) for s in self.properties[k]]

        #add as a special item the names of the properties
        dict_of_dicts["NamesOfProperties"] = self.property_names

        json_string = json.dumps(dict_of_dicts)

        if filename:
            with open(filename, 'w') as f:
                f.write(json_string)
        return json_string



    def add_property(self, name, values):
        """ Add list of values as properties to items in the data frame, assume values are sorted on filename """
        if len(values) != len(self.properties.keys()):
            raise Exception("Error number of values should be the same")
        self.property_names.append(name)
        for k,v in zip(self.properties.keys(),values):
            self.properties[k].append(v)




    def __str__(self):
        return str(self.data_frame)

